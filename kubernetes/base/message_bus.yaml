#---
#apiVersion: v1
#kind: ConfigMap
#metadata:
#  name: cp-kafka-connect-jmx-configmap
#  labels:
#    app: cp-kafka-connect
#data:
#  jmx-kafka-connect-prometheus.yml: |+
#    jmxUrl: service:jmx:rmi:///jndi/rmi://localhost:5555/jmxrmi
#    lowercaseOutputName: true
#    lowercaseOutputLabelNames: true
#    ssl: false
#    rules:
#    - pattern : "kafka.connect<type=connect-worker-metrics>([^:]+):"
#      name: "cp_kafka_connect_connect_worker_metrics_$1"
#    - pattern : "kafka.connect<type=connect-metrics, client-id=([^:]+)><>([^:]+)"
#      name: "cp_kafka_connect_connect_metrics_$1_$2"
#    - pattern : "kafka.connect<type=connector-task-metrics, connector=([^:]+), task=([^:]+)><>status: ([^:]+)"
#      name: "cp_kafka_connect_connect_connector_metrics"
#      value: 1
#      labels:
#        connector: $1
#        task: $2
#        status: $3
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: cp-kafka-rest-jmx-configmap
  labels:
    app: cp-kafka-rest
data:
  jmx-kafka-rest-prometheus.yml: |+
    jmxUrl: service:jmx:rmi:///jndi/rmi://localhost:5555/jmxrmi
    lowercaseOutputName: true
    lowercaseOutputLabelNames: true
    ssl: false
    rules:
    - pattern : 'kafka.rest<type=jetty-metrics>([^:]+):'
      name: "cp_kafka_rest_jetty_metrics_$1"
    - pattern : 'kafka.rest<type=jersey-metrics>([^:]+):'
      name: "cp_kafka_rest_jersey_metrics_$1"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: cp-kafka-jmx-configmap
  labels:
    app: cp-kafka
data:
  jmx-kafka-prometheus.yml: |+
    jmxUrl: service:jmx:rmi:///jndi/rmi://localhost:5555/jmxrmi
    lowercaseOutputName: true
    lowercaseOutputLabelNames: true
    ssl: false
    rules:
    - pattern : kafka.server<type=ReplicaManager, name=(.+)><>(Value|OneMinuteRate)
      name: "cp_kafka_server_replicamanager_$1"
    - pattern : kafka.controller<type=KafkaController, name=(.+)><>Value
      name: "cp_kafka_controller_kafkacontroller_$1"
    - pattern : kafka.server<type=BrokerTopicMetrics, name=(.+)><>OneMinuteRate
      name: "cp_kafka_server_brokertopicmetrics_$1"
    - pattern : kafka.network<type=RequestMetrics, name=RequestsPerSec, request=(.+)><>OneMinuteRate
      name: "cp_kafka_network_requestmetrics_requestspersec_$1"
    - pattern : kafka.network<type=SocketServer, name=NetworkProcessorAvgIdlePercent><>Value
      name: "cp_kafka_network_socketserver_networkprocessoravgidlepercent"
    - pattern : kafka.server<type=ReplicaFetcherManager, name=MaxLag, clientId=(.+)><>Value
      name: "cp_kafka_server_replicafetchermanager_maxlag_$1"
    - pattern : kafka.server<type=KafkaRequestHandlerPool, name=RequestHandlerAvgIdlePercent><>OneMinuteRate
      name: "cp_kafka_kafkarequesthandlerpool_requesthandleravgidlepercent"
    - pattern : kafka.controller<type=ControllerStats, name=(.+)><>OneMinuteRate
      name: "cp_kafka_controller_controllerstats_$1"
    - pattern : kafka.server<type=SessionExpireListener, name=(.+)><>OneMinuteRate
      name: "cp_kafka_server_sessionexpirelistener_$1"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: cp-ksql-server-jmx-configmap
  labels:
    app: cp-ksql-server
data:
  jmx-ksql-server-prometheus.yml: |+
    jmxUrl: service:jmx:rmi:///jndi/rmi://localhost:5555/jmxrmi
    lowercaseOutputName: true
    lowercaseOutputLabelNames: true
    ssl: false
    rules:
    - pattern : 'io.confluent.ksql.metrics<type=ksql-engine-query-stats>([^:]+):'
      name: "cp_ksql_server_metrics_$1"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: cp-ksql-server-ksql-queries-configmap
  labels:
    app: cp-ksql-server
data:
  queries.sql: |-
    -- From http://docs.confluent.io/current/ksql/docs/tutorials/basics-docker.html#create-a-stream-and-table
    
    -- Create a stream pageviews_original from the Kafka topic pageviews, specifying the value_format of DELIMITED
    CREATE STREAM pageviews_original (viewtime bigint, userid varchar, pageid varchar) WITH (kafka_topic='pageviews', value_format='DELIMITED');
    
    -- Create a table users_original from the Kafka topic users, specifying the value_format of JSON
    CREATE TABLE users_original (registertime BIGINT, gender VARCHAR, regionid VARCHAR, userid VARCHAR) WITH (kafka_topic='users', value_format='JSON', key = 'userid');
    
    -- Create a persistent query by using the CREATE STREAM keywords to precede the SELECT statement
    CREATE STREAM pageviews_enriched AS SELECT users_original.userid AS userid, pageid, regionid, gender FROM pageviews_original LEFT JOIN users_original ON pageviews_original.userid = users_original.userid;
    
    -- Create a new persistent query where a condition limits the streams content, using WHERE
    CREATE STREAM pageviews_female AS SELECT * FROM pageviews_enriched WHERE gender = 'FEMALE';
    
    -- Create a new persistent query where another condition is met, using LIKE
    CREATE STREAM pageviews_female_like_89 WITH (kafka_topic='pageviews_enriched_r8_r9') AS SELECT * FROM pageviews_female WHERE regionid LIKE '%_8' OR regionid LIKE '%_9';
    
    -- Create a new persistent query that counts the pageviews for each region and gender combination in a tumbling window of 30 seconds when the count is greater than one
    CREATE TABLE pageviews_regions WITH (VALUE_FORMAT='avro') AS SELECT gender, regionid , COUNT(*) AS numusers FROM pageviews_enriched WINDOW TUMBLING (size 30 second) GROUP BY gender, regionid HAVING COUNT(*) > 1;
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: cp-schema-registry-jmx-configmap
  labels:
    app: cp-schema-registry
data:
  jmx-schema-registry-prometheus.yml: |+
    jmxUrl: service:jmx:rmi:///jndi/rmi://localhost:5555/jmxrmi
    lowercaseOutputName: true
    lowercaseOutputLabelNames: true
    ssl: false
    rules:
    - pattern : 'kafka.schema.registry<type=jetty-metrics>([^:]+):'
      name: "cp_kafka_schema_registry_jetty_metrics_$1"
    - pattern : 'kafka.schema.registry<type=master-slave-role>([^:]+):'
      name: "cp_kafka_schema_registry_master_slave_role"
    - pattern : 'kafka.schema.registry<type=jersey-metrics>([^:]+):'
      name: "cp_kafka_schema_registry_jersey_metrics_$1"
---
apiVersion: v1
kind: Service
metadata:
  name: cp-control-center
  labels:
    app: cp-control-center
spec:
  ports:
    - name: cc-http
      port: 9021
  selector:
    app: cp-control-center
---
#apiVersion: v1
#kind: Service
#metadata:
#  name: cp-kafka-connect
#  labels:
#    app: cp-kafka-connect
#spec:
#  ports:
#    - name: kafka-connect
#      port: 8083
#  selector:
#    app: cp-kafka-connect
#---
apiVersion: v1
kind: Service
metadata:
  name: cp-kafka-rest
  labels:
    app: cp-kafka-rest
spec:
  ports:
    - name: rest-proxy
      port: 8082
  selector:
    app: cp-kafka-rest
---
apiVersion: v1
kind: Service
metadata:
  name: cp-kafka-headless
  labels:
    app: cp-kafka
spec:
  ports:
    - port: 9092
      name: broker
  clusterIP: None
  selector:
    app: cp-kafka
---
apiVersion: v1
kind: Service
metadata:
  name: cp-kafka
  labels:
    app: cp-kafka
spec:
  ports:
    - port: 9092
      name: broker
  selector:
    app: cp-kafka
---
apiVersion: v1
kind: Service
metadata:
  name: cp-ksql-server
  labels:
    app: cp-ksql-server
spec:
  ports:
      - name: ksql-server
        port: 8088
  selector:
    app: cp-ksql-server
---
#apiVersion: v1
#kind: Service
#metadata:
#  name: cp-schema-registry
#  labels:
#    app: cp-schema-registry
#spec:
#  ports:
#    - name: schema-registry
#      port: 8081
#  selector:
#    app: cp-schema-registry
#---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cp-control-center
  labels:
    app: cp-control-center
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cp-control-center
  template:
    metadata:
      labels:
        app: cp-control-center
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "5556"
    spec:
      containers:
        - name: cp-control-center
          image: "confluentinc/cp-enterprise-control-center:5.2.0"
          imagePullPolicy: IfNotPresent
          ports:
            - name: cc-http
              containerPort: 9021
              protocol: TCP
          resources:            {}
          env:
            - name: CONTROL_CENTER_BOOTSTRAP_SERVERS
              value: PLAINTEXT://cp-kafka-headless:9092
            - name: CONTROL_CENTER_ZOOKEEPER_CONNECT
              value: 
            - name: CONTROL_CENTER_CONNECT_CLUSTER
              value: http://cp-kafka-connect:8083
            - name: CONTROL_CENTER_KSQL_URL
              value: http://cp-ksql-server:8088
            - name: CONTROL_CENTER_KSQL_ADVERTISED_URL
              value: http://cp-ksql-server:8088
            - name: CONTROL_CENTER_SCHEMA_REGISTRY_URL
              value: http://cp-schema-registry:8081
            - name: KAFKA_HEAP_OPTS
              value: "-Xms512M -Xmx512M"
            - name: "CONTROL_CENTER_REPLICATION_FACTOR"
              value: "3"
#---
#apiVersion: apps/v1
#kind: Deployment
#metadata:
#  name: cp-kafka-connect
#  labels:
#    app: cp-kafka-connect
#spec:
#  replicas: 1
#  selector:
#    matchLabels:
#      app: cp-kafka-connect
#  template:
#    metadata:
#      labels:
#        app: cp-kafka-connect
#      annotations:
#        prometheus.io/scrape: "true"
#        prometheus.io/port: "5556"
#    spec:
#      containers:
#        - name: prometheus-jmx-exporter
#          #image: "solsson/kafka-prometheus-jmx-exporter@sha256:6f82e2b0464f50da8104acd7363fb9b995001ddff77d248379f8788e78946143"
#          imagePullPolicy: "IfNotPresent"
#          command:
#          - java
#          - -XX:+UnlockExperimentalVMOptions
#          - -XX:+UseCGroupMemoryLimitForHeap
#          - -XX:MaxRAMFraction=1
#          - -XshowSettings:vm
#          - -jar
#          - jmx_prometheus_httpserver.jar
#          - "5556"
#          - /etc/jmx-kafka-connect/jmx-kafka-connect-prometheus.yml
#          ports:
#          - containerPort: 5556
#          resources:
#            {}
#          volumeMounts:
#          - name: jmx-config
#            mountPath: /etc/jmx-kafka-connect
#        - name: cp-kafka-connect-server
#          image: "confluentinc/cp-kafka-connect:5.3.1"
#          imagePullPolicy: "IfNotPresent"
#          ports:
#            - name: kafka-connect
#              containerPort: 8083
#              protocol: TCP
#            - containerPort: 5555
#              name: jmx
#          resources:
#            {}
#          env:
#            - name: CONNECT_REST_ADVERTISED_HOST_NAME
#              valueFrom:
#                fieldRef:
#                  fieldPath: status.podIP
#            - name: CONNECT_BOOTSTRAP_SERVERS
#              value: PLAINTEXT://cp-kafka-headless:9092
#            - name: CONNECT_GROUP_ID
#              value: RELEASE-NAME
#            - name: CONNECT_CONFIG_STORAGE_TOPIC
#              value: cp-kafka-connect-config
#            - name: CONNECT_OFFSET_STORAGE_TOPIC
#              value: cp-kafka-connect-offset
#            - name: CONNECT_STATUS_STORAGE_TOPIC
#              value: cp-kafka-connect-status
#            - name: CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL
#              value: http://cp-schema-registry:8081
#            - name: CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL
#              value: http://cp-schema-registry:8081
#            - name: KAFKA_HEAP_OPTS
#              value: "-Xms512M -Xmx512M"
#            - name: "CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR"
#              value: "3"
#            - name: "CONNECT_INTERNAL_KEY_CONVERTER"
#              value: "org.apache.kafka.connect.json.JsonConverter"
#            - name: "CONNECT_INTERNAL_VALUE_CONVERTER"
#              value: "org.apache.kafka.connect.json.JsonConverter"
#            - name: "CONNECT_KEY_CONVERTER"
#              value: "io.confluent.connect.avro.AvroConverter"
#            - name: "CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE"
#              value: "false"
#            - name: "CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR"
#              value: "3"
#            - name: "CONNECT_PLUGIN_PATH"
#              value: "/usr/share/java,/usr/share/confluent-hub-components"
#            - name: "CONNECT_STATUS_STORAGE_REPLICATION_FACTOR"
#              value: "3"
#            - name: "CONNECT_VALUE_CONVERTER"
#              value: "io.confluent.connect.avro.AvroConverter"
#            - name: "CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE"
#              value: "false"
#            - name: KAFKA_JMX_PORT
#              value: "5555"
#      volumes:
#      - name: jmx-config
#        configMap:
#          name: cp-kafka-connect-jmx-configmap
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cp-kafka-rest
  labels:
    app: cp-kafka-rest
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cp-kafka-rest
  template:
    metadata:
      labels:
        app: cp-kafka-rest
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "5556"
    spec:
      containers:
        - name: prometheus-jmx-exporter
          image: "solsson/kafka-prometheus-jmx-exporter@sha256:6f82e2b0464f50da8104acd7363fb9b995001ddff77d248379f8788e78946143"
          imagePullPolicy: "IfNotPresent"
          command:
          - java
          - -XX:+UnlockExperimentalVMOptions
          - -XX:+UseCGroupMemoryLimitForHeap
          - -XX:MaxRAMFraction=1
          - -XshowSettings:vm
          - -jar
          - jmx_prometheus_httpserver.jar
          - "5556"
          - /etc/jmx-kafka-rest/jmx-kafka-rest-prometheus.yml
          ports:
          - containerPort: 5556
          resources:
            {}
          volumeMounts:
          - name: jmx-config
            mountPath: /etc/jmx-kafka-rest
        - name: cp-kafka-rest-server
          image: "confluentinc/cp-kafka-rest:5.3.1"
          imagePullPolicy: "IfNotPresent"
          ports:
            - name: rest-proxy
              containerPort: 8082
              protocol: TCP
            - containerPort: 5555
              name: jmx
          resources:
            {}
          env:
          - name: KAFKA_REST_HOST_NAME
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: KAFKA_REST_ZOOKEEPER_CONNECT
            value: zk-headless:2181
          - name: KAFKA_REST_SCHEMA_REGISTRY_URL
            value: http://cp-schema-registry:8081
          - name: KAFKAREST_HEAP_OPTS
            value: "-Xms512M -Xmx512M"
          - name: KAFKA_REST_JMX_PORT
            value: "5555"
      volumes:
      - name: jmx-config
        configMap:
          name: cp-kafka-rest-jmx-configmap
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cp-ksql-server
  labels:
    app: cp-ksql-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cp-ksql-server
  template:
    metadata:
      labels:
        app: cp-ksql-server
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "5556"
    spec:
      containers:
        - name: prometheus-jmx-exporter
          image: "solsson/kafka-prometheus-jmx-exporter@sha256:6f82e2b0464f50da8104acd7363fb9b995001ddff77d248379f8788e78946143"
          imagePullPolicy: "IfNotPresent"
          command:
          - java
          - -XX:+UnlockExperimentalVMOptions
          - -XX:+UseCGroupMemoryLimitForHeap
          - -XX:MaxRAMFraction=1
          - -XshowSettings:vm
          - -jar
          - jmx_prometheus_httpserver.jar
          - "5556"
          - /etc/jmx-ksql-server/jmx-ksql-server-prometheus.yml
          ports:
          - containerPort: 5556
          resources:
            {}
          volumeMounts:
          - name: jmx-config
            mountPath: /etc/jmx-ksql-server
        - name: cp-ksql-server
          image: "confluentinc/cp-ksql-server:5.3.1"
          imagePullPolicy: "IfNotPresent"
          ports:
            - name: server
              containerPort: 8088
              protocol: TCP
            - containerPort: 5555
              name: jmx
          resources:
            {}
          volumeMounts:
          env:
          - name: KSQL_BOOTSTRAP_SERVERS
            value: PLAINTEXT://cp-kafka-headless:9092
          - name: KSQL_KSQL_SERVICE_ID
            value: RELEASE-NAME
          - name: KSQL_KSQL_SCHEMA_REGISTRY_URL
            value: http://cp-schema-registry:8081
          - name: KSQL_HEAP_OPTS
            value: "-Xms512M -Xmx512M"
          - name: KSQL_LISTENERS
            value: http://0.0.0.0:8088
          - name: KSQL_JMX_PORT
            value: "5555"
      volumes:
      - name: jmx-config
        configMap:
          name: cp-ksql-server-jmx-configmap
---
#apiVersion: apps/v1
#kind: Deployment
#metadata:
#  name: cp-schema-registry
#  labels:
#    app: cp-schema-registry
#spec:
#  replicas: 1
#  selector:
#    matchLabels:
#      app: cp-schema-registry
#  template:
#    metadata:
#      labels:
#        app: cp-schema-registry
#     annotations:
#       prometheus.io/scrape: "true"
#       prometheus.io/port: "5556"
#   spec:
#     containers:
#       - name: prometheus-jmx-exporter
#         image: "solsson/kafka-prometheus-jmx-exporter"
#         imagePullPolicy: "IfNotPresent"
#         command:
#         - java
#         - -XX:+UnlockExperimentalVMOptions
#         - -XX:+UseCGroupMemoryLimitForHeap
#         - -XX:MaxRAMFraction=1
#         - -XshowSettings:vm
#         - -jar
#         - jmx_prometheus_httpserver.jar
#         - "5556"
#         - /etc/jmx-schema-registry/jmx-schema-registry-prometheus.yml
#         ports:
#         - containerPort: 5556
#         resources:
#           {}
#         volumeMounts:
#         - name: jmx-config
#           mountPath: /etc/jmx-schema-registry
#       - name: cp-schema-registry-server
#         image: "confluentinc/cp-schema-registry:5.3.1"
#         imagePullPolicy: "IfNotPresent"
#         ports:
#           - name: schema-registry
#             containerPort: 8081
#             protocol: TCP
#           - containerPort: 5555
#             name: jmx
#         resources:
#           {}
#         env:
#         - name: SCHEMA_REGISTRY_HOST_NAME
#           valueFrom:
#             fieldRef:
#               fieldPath: status.podIP
#         - name: SCHEMA_REGISTRY_LISTENERS
#           value: http://0.0.0.0:8081
#         - name: SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS
#           value: PLAINTEXT://cp-kafka-headless:9092
#         - name: SCHEMA_REGISTRY_KAFKASTORE_GROUP_ID
#           value: RELEASE-NAME
#         - name: SCHEMA_REGISTRY_MASTER_ELIGIBILITY
#           value: "true"
#         - name: SCHEMA_REGISTRY_HEAP_OPTS
#           value: "-Xms512M -Xmx512M"
#         
#         - name: JMX_PORT
#           value: "5555"
#     volumes:
#     - name: jmx-config
#       configMap:
#         name: cp-schema-registry-jmx-configmap
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: cp-kafka
  labels:
    app: cp-kafka
spec:
  selector:
    matchLabels:
      app: cp-kafka
  serviceName: cp-kafka-headless
  podManagementPolicy: OrderedReady
  replicas: 3
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: cp-kafka
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "5556"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                    - cp-kafka
              topologyKey: "kubernetes.io/hostname"
      containers:
      - name: prometheus-jmx-exporter
        image: "solsson/kafka-prometheus-jmx-exporter@sha256:6f82e2b0464f50da8104acd7363fb9b995001ddff77d248379f8788e78946143"
        imagePullPolicy: "IfNotPresent"
        command:
        - java
        - -XX:+UnlockExperimentalVMOptions
        - -XX:+UseCGroupMemoryLimitForHeap
        - -XX:MaxRAMFraction=1
        - -XshowSettings:vm
        - -jar
        - jmx_prometheus_httpserver.jar
        - "5556"
        - /etc/jmx-kafka/jmx-kafka-prometheus.yml
        ports:
        - containerPort: 5556
        resources:
          {}
        volumeMounts:
        - name: jmx-config
          mountPath: /etc/jmx-kafka
      - name: cp-kafka-broker
        image: "confluentinc/cp-enterprise-kafka:5.3.2"
        imagePullPolicy: "IfNotPresent"
        ports:
        - containerPort: 9092
          name: kafka
        - containerPort: 5555
          name: jmx
        resources:
          {}
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: HOST_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KAFKA_HEAP_OPTS
          value: -Xms512M -Xmx512M
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: "zk-headless:2181"
        - name: KAFKA_LOG_DIRS
          value: "/opt/kafka/data-0/logs"
        - name: KAFKA_METRIC_REPORTERS
          value: "io.confluent.metrics.reporter.ConfluentMetricsReporter"
        - name: CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS
          value: "PLAINTEXT://cp-kafka-headless:9092"
        - name: "KAFKA_LISTENER_SECURITY_PROTOCOL_MAP"
          value: "PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT"
        - name: "KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR"
          value: "3"
        - name: KAFKA_JMX_PORT
          value: "5555"
        # This is required because the Downward API does not yet support identification of
        # pod numbering in statefulsets. Thus, we are required to specify a command which
        # allows us to extract the pod ID for usage as the Kafka Broker ID.
        # See: https://github.com/kubernetes/kubernetes/issues/31218
        command:
        - sh
        - -exc
        - |
          export KAFKA_BROKER_ID=${HOSTNAME##*-} && \
          export KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://${POD_NAME}.cp-kafka-headless.${POD_NAMESPACE}:9092,EXTERNAL://${HOST_IP}:$((31090 + ${KAFKA_BROKER_ID})) && \
          exec /etc/confluent/docker/run
        volumeMounts:
          - name: datadir-0
            mountPath: /opt/kafka/data-0
      volumes:
      - name: jmx-config
        configMap:
          name: cp-kafka-jmx-configmap
      - name: datadir-0
        emptyDir:
          sizeLimit: "1Gi"
---
#apiVersion: v1
#kind: Pod
#metadata:
#  name: "canary"
#  annotations:
#    "helm.sh/hook": test-success
#    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
#spec:
#  containers:
#  - name: canary
#    image: "confluentinc/cp-enterprise-kafka:5.3.1"
#    imagePullPolicy: "IfNotPresent"
#    command:
#    - sh
#    - -c
#    - |
#      # Delete the topic if it exists
#      kafka-topics --zookeeper zk-headless:2181 --topic cp-kafka-canary-topic --delete --if-exists
#      # Create the topic
#      kafka-topics --zookeeper zk-headless:2181 --topic cp-kafka-canary-topic --create --partitions 1 --replication-factor 1 --if-not-exists && \
#      # Create a message
#      MESSAGE="`date -u`" && \
#      # Produce a test message to the topic
#      echo "$MESSAGE" | kafka-console-producer --broker-list cp-kafka:9092 --topic cp-kafka-canary-topic && \
#      # Consume a test message from the topic
#      kafka-console-consumer --bootstrap-server cp-kafka-headless:9092 --topic cp-kafka-canary-topic --from-beginning --timeout-ms 2000 | grep "$MESSAGE"
#  restartPolicy: Never
